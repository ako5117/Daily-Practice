<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jump or Duck Game</title>
    <style>
        canvas {
            border: 1px solid black;
            display: block;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="400"></canvas>
    <script>
        // Get the canvas element
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');

        // Game variables
        let score = 0;
        let highScore = 0;
        let gameOver = false;

        // Player
        const player = {
            x: 50,
            y: 200,
            width: 40,
            height: 60,
            jumping: false,
            ducking: false
        };

        // Obstacles
        const obstacles = [];
        let obstacleTimer = 0;

        // Game loop
        function gameLoop() {
            // Clear the canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            if (!gameOver) {
                // Update game state
                updatePlayer();
                updateObstacles();
                checkCollisions();

                // Increase score
                score++;
            }

            // Draw game objects
            drawPlayer();
            drawObstacles();
            drawScore();

            if (gameOver) {
                drawGameOver();
            }

            // Next frame
            requestAnimationFrame(gameLoop);
        }

        // Update player position and state
        function updatePlayer() {
            if (player.jumping) {
                player.y -= 5;
                if (player.y <= 100) {
                    player.jumping = false;
                }
            } else if (player.y < 200) {
                player.y += 5;
            }

            if (player.ducking) {
                player.height = 30;
            } else {
                player.height = 60;
            }
        }

        // Update obstacles
        function updateObstacles() {
            obstacleTimer++;
            if (obstacleTimer >= 60) {
                obstacleTimer = 0;
                const type = Math.random() < 0.5 ? 'high' : 'low';
                obstacles.push({
                    x: canvas.width,
                    y: type === 'high' ? 150 : 230,
                    width: 30,
                    height: type === 'high' ? 100 : 20,
                    type: type
                });
            }

            for (let i = obstacles.length - 1; i >= 0; i--) {
                obstacles[i].x -= 5;
                if (obstacles[i].x + obstacles[i].width < 0) {
                    obstacles.splice(i, 1);
                }
            }
        }

        // Check for collisions
        function checkCollisions() {
            for (const obstacle of obstacles) {
                if (
                    player.x < obstacle.x + obstacle.width &&
                    player.x + player.width > obstacle.x &&
                    player.y < obstacle.y + obstacle.height &&
                    player.y + player.height > obstacle.y
                ) {
                    gameOver = true;
                    if (score > highScore) {
                        highScore = score;
                    }
                }
            }
        }

        // Draw the player
        function drawPlayer() {
            ctx.fillStyle = 'blue';
            ctx.fillRect(player.x, player.y, player.width, player.height);
        }

        // Draw obstacles
        function drawObstacles() {
            ctx.fillStyle = 'red';
            for (const obstacle of obstacles) {
                ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);
            }
        }

        // Draw score
        function drawScore() {
            ctx.fillStyle = 'black';
            ctx.font = '20px Arial';
            ctx.fillText(`Score: ${score}`, 10, 30);
            ctx.fillText(`High Score: ${highScore}`, 10, 60);
        }

        // Draw game over screen
        function drawGameOver() {
            ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = 'white';
            ctx.font = '40px Arial';
            ctx.fillText('Game Over', canvas.width / 2 - 100, canvas.height / 2);
            ctx.font = '20px Arial';
            ctx.fillText('Press Space to Restart', canvas.width / 2 - 100, canvas.height / 2 + 40);
        }

        // Handle key presses
        document.addEventListener('keydown', (event) => {
            if (event.code === 'Space') {
                if (gameOver) {
                    // Restart game
                    score = 0;
                    obstacles.length = 0;
                    gameOver = false;
                } else {
                    // Jump
                    if (!player.jumping && player.y === 200) {
                        player.jumping = true;
                    }
                }
            } else if (event.code === 'ArrowDown') {
                // Duck
                player.ducking = true;
            }
        });

        document.addEventListener('keyup', (event) => {
            if (event.code === 'ArrowDown') {
                // Stop ducking
                player.ducking = false;
            }
        });

        // Start the game loop
        gameLoop();
    </script>
</body>
</html>
